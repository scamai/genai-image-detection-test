{
	"info": {
		"_postman_id": "12345678-1234-5678-9012-123456789012",
		"name": "AI-Image-Detector-Local",
		"description": "Collection for testing AI Image Detector API locally",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "12345678"
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseURL",
			"value": "http://localhost:8000",
			"type": "string"
		},
		{
			"key": "sampleImageBase64",
			"value": "",
			"type": "string"
		},
		{
			"key": "testImageURL",
			"value": "",
			"type": "string"
		},
		{
			"key": "isoTimestamp",
			"value": "",
			"type": "string"
		}
	],
	"item": [
		{
			"name": "Health-Check",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", () => pm.response.to.have.status(200));",
							"const json = pm.response.json();",
							"pm.expect(json.status).to.eql(\"healthy\");"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseURL}}/health",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"health"
					]
				}
			},
			"response": []
		},
		{
			"name": "Predict-(Base64)",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Set default base64 image if not already set",
							"if (!pm.collectionVariables.get('sampleImageBase64')) {",
							"  const defaultImage = 'iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAYAAAAfFcSJAAAADUlEQVR42mNkYPhfDwAChwGA60e6kgAAAABJRU5ErkJggg==';",
							"  pm.collectionVariables.set('sampleImageBase64', defaultImage);",
							"  console.log('Using default test image (1x1 pixel). Override in Variables if needed.');",
							"}",
							"pm.collectionVariables.set('isoTimestamp', new Date().toISOString());"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code 200\", () => pm.response.to.have.status(200));",
							"pm.test(\"Response is object\", () => pm.expect(typeof pm.response.json()).to.eql(\"object\"));"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"task_id\": \"test_task_base64\",\n  \"timestamp\": \"{{isoTimestamp}}\",\n  \"data\": {\n    \"type\": \"image\",\n    \"payload\": \"{{sampleImageBase64}}\"\n  }\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}/predict",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"predict"
					]
				}
			},
			"response": []
		},
		{
			"name": "Predict-(Image-URL)",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Set default image URL if not already set",
							"if (!pm.collectionVariables.get('testImageURL')) {",
							"  pm.collectionVariables.set('testImageURL', 'https://picsum.photos/300/200.jpg');",
							"  console.log('Using default test image URL. Override in Variables if needed.');",
							"}",
							"pm.collectionVariables.set('isoTimestamp', new Date().toISOString());"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code 200\", () => pm.response.to.have.status(200));",
							"pm.test(\"Response is object\", () => pm.expect(typeof pm.response.json()).to.eql(\"object\"));"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"task_id\": \"test_task_url\",\n  \"timestamp\": \"{{isoTimestamp}}\",\n  \"data\": {\n    \"type\": \"image\",\n    \"payload\": \"{{testImageURL}}\"\n  }\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}/predict",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"predict"
					]
				}
			},
			"response": []
		}
	]
} 